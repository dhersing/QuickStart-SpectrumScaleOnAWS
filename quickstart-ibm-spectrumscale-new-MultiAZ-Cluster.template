{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This CloudFormation Template deploys a complete gpfsaws environment.",
  "Metadata": {
  	"AWS::CloudFormation::Interface" : {
  		"ParameterGroups" : [
  			{
  			    "Label": { "default": "File System Configurations:" },
  			    "Parameters": [ "FsName", "BlockSize", "DataReplica", "MetadataReplica", "GpfsMountPoint" ]
  			},
  			{
  			    "Label": { "default": "NSD Configurations:" },
  			    "Parameters": [ "EBSType", "DiskPerNode", "DiskSize" ]
  			},
  			{
  			    "Label": { "default": "Server Node Configurations:" },
  			    "Parameters": [ "ServerNodeCount", "ServerInstanceType"
  			    ]
  			},
  			{
  			    "Label": { "default": "Compute Node Configurations:" },
  			    "Parameters": [ "ComputeNodeCount", "ComputeInstanceType" ]
  			},
  			{
  				"Label": { "default" : "Network Configuration:" },
  				"Parameters": [ "AvailabilityZones", "VpcId", "SubnetId1", "SubnetId2" ]
  			},
  			{
  				"Label": { "default" : "Security Configuration:" },
  				"Parameters": [ "KeyName", "IAMRole", "RemoteAccessLocation" ]
  			},
  			{
  				"Label": { "default" : "Other Configuration:" },
  				"Parameters": [ "s3path", "ClusterName" ]
  			}
  		]
  	}
  },
  "Parameters": {
    "FsName": {
      "Description": "File system name.",
      "Type": "String",
      "MinLength": "1",
      "Default": "fs1"
    },
    "BlockSize": {
      "Description": "File system block size",
      "Type": "String",
      "Default": "1M",
      "AllowedValues": [
         "64K", "128K", "256K", "512K", "1M", "2M", "4M", "8M", "16M"
      ]
    },
    "DataReplica": {
      "Description": "Data replica",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1",
      "MaxValue": "3"
    },
    "MetadataReplica": {
      "Description": "Metadata replica",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1",
      "MaxValue": "3"
    },
    "GpfsMountPoint": {
      "Description": "The Linux mount point for the GPFS volume",
      "Type": "String",
      "MinLength": "1",
      "Default": "/gfs/fs1"
    },
    "EBSType": {
      "Description": "EBS Type",
      "Type": "String",
      "Default": "gp2",
      "AllowedValues": [
        "standard",
        "gp2",
        "io1"
      ]
    },
    "DiskPerNode": {
      "Description": "This number of disks would be attached to only with nsd server nodes.",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "10",
      "Default": "1"
    },
    "DiskSize": {
      "Description": "Disk size (size in GB and MAX supported size would be 10000 (10TB)",
      "Type": "Number",
      "Default": "5",
      "MinValue": "5",
      "MaxValue": "10000"
    },
    "ServerNodeCount": {
      "Description": "Number of EC2 instances to launch for NSD Server on GPFS cluster (Max<=64)",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1",
      "MaxValue": "64"
    },
    "ServerInstanceType": {
      "Description": "Instance type to use for the NSD Server nodes instances",
      "Type": "String",
      "Default": "m4.large",
      "AllowedValues": [
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "cc2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "ComputeNodeCount": {
      "Default": "1",
      "Description": "Number of Compute node instances (MAX 64)",
      "Type": "Number",
      "MinValue": "0",
      "MaxValue": "64"
    },
    "ComputeInstanceType": {
      "Description": "Instance type to use for the Compute node instances",
      "Type": "String",
      "Default": "m4.large",
      "AllowedValues": [
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "cc2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "AvailabilityZones": {
      "Description": "AZ region for the cluster",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>",
      "Default": "us-west-2b"
    },
    "VpcId": {
      "AllowedPattern": "vpc-[a-z0-9]*",
      "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores.",
      "Default": "vpc-1efa597a",
      "Description": "Id of an exisiting VPC that contains a public subnet on same AZ as selected i.e. vpc-1efa597a",
      "MaxLength": "64",
      "MinLength": "1",
      "Type": "AWS::EC2::VPC::Id"
    },
    "SubnetId1": {
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
        "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
        "Default": "10.0.128.0/20",
        "Description": "CIDR Block for the public DMZ subnet 1 located in Availability Zone 1",
        "Type": "String"
    },
    "SubnetId2": {
        "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
        "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
        "Default": "10.0.144.0/20",
        "Description": "CIDR Block for the public DMZ subnet 2 located in Availability Zone 2",
        "Type": "String"
     },
    "RemoteAccessLocation": {
      "Description": "Lockdown RDP access to the bastion host (default can be accessed from anywhere)",
      "Type": "String",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "s3path": {
      "Default": "ssprojects/gpfsaws",
      "Description": "Root Path for all s3 related Data",
      "Type": "String"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 Key Pair",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength": "1",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "ClusterName": {
      "Description": "The name of the gpfs cluster",
      "Type": "String",
      "MinLength": "1",
      "Default": "gpfsaws"
    },
    "IAMRole" : {
      "Description" : "Add existing role name (default will create new IAM role).",
      "Type": "String",
      "Default": "new",
      "ConstraintDescription" : "Add existing role name if don't want to create new one (Optional)."
    }
  },
  "Mappings": {
    "RegionMap" : {
      "us-east-1"      : { "AMI" : "ami-e5ec6085"},
      "us-west-1"      : { "AMI" : "ami-e5ec6085"},
      "us-west-2"      : { "AMI" : "ami-e5ec6085"},
      "eu-west-1"      : { "AMI" : "ami-e5ec6085"},
      "sa-east-1"      : { "AMI" : "ami-e5ec6085"},
      "ap-southeast-1" : { "AMI" : "ami-e5ec6085"},
      "ap-southeast-2" : { "AMI" : "ami-e5ec6085"},
      "ap-northeast-1" : { "AMI" : "ami-e5ec6085"}
    }
    
  },
  "Conditions" : {
    "NewIAMRole" : {"Fn::Equals" : [{"Ref" : "IAMRole"}, "new"]}
  },
  "Resources": {
    "AdminNodeIAMRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "NewIAMRole",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEC2FullAccess",
          "arn:aws:iam::aws:policy/AmazonSSMFullAccess",
          "arn:aws:iam::aws:policy/CloudWatchFullAccess",
          "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM",
          "arn:aws:iam::aws:policy/AWSDirectoryServiceReadOnlyAccess",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        ],
        "Policies": [
        
          {
            "PolicyName": "S3Access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::ssprojects/*"
                }
              ]
            }
          },
          {
            "PolicyName": "InstancePass",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "AdminNodeInstanceIAMRole":{
    "Type": "AWS::IAM::InstanceProfile",
    "Properties": {
        "Fn::If" : [
      			"NewIAMRole",
      {
      	"Path": "/",
        "Roles": [
          {
            "Ref": "AdminNodeIAMRole"
          }
        ]
       },
       {
       	"Path": "/",
        "Roles": [
          {
            "Ref": "IAMRole"
          }
        ]
       } 
      ]}
    },
    "RemoteAccessSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Cluster: Enables RDP access via port 3389 from Bastion, all traffic from within the group",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          
          {
            "IpProtocol": "tcp",
            "FromPort": "3389",
            "ToPort": "3389",
            "CidrIp": {
              "Ref": "RemoteAccessLocation"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "RemoteAccessLocation"
            }
          }
        ],
        "SecurityGroupEgress": [
          
          {
            "IpProtocol": "-1",
            "FromPort": "1",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  " - Remote Access SG"
                ]
              ]
            }
          }
        ]
      }
    },
    "ServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Cluster: Enables cluster nodes to talk within the group",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65536",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  " - Server Cluster SG"
                ]
              ]
            }
          }
        ]
      }
    },
    "ComputeSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Cluster: Enables cluster nodes to talk within the group",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "FromPort": "0",
            "ToPort": "65536",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [ 
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  " - Compute Cluster SG"
                ]
              ]
            }
          }
        ]
      }
    },
    "ServerSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ServerSecurityGroup"
        },
        "IpProtocol": "-1",
        "FromPort": "0",
        "ToPort": "65535",
        "SourceSecurityGroupId": {
          "Ref": "ComputeSecurityGroup"
        }
      }
    },
    "ComputeSecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "ComputeSecurityGroup"
        },
        "IpProtocol": "-1",
        "FromPort": "0",
        "ToPort": "65535",
        "SourceSecurityGroupId": {
          "Ref": "ServerSecurityGroup"
        }
      }
    },
    "ServerNodeLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "configure_base",
              {
                "ConfigSet": "configure_gpfs"
              }
            ],
            "configure_gpfs": [
              
              "setup_gpfs"
            ]
          },
          "configure_base": {
            "packages": {},
            "files": {},
            "services": {
              "sysvinit": {}
            }
          },
          "setup_gpfs": {
            "packages": {
              "yum": {
                "nfs-utils": []
              }
            },
            "files": {
            "/etc/gpfsaws.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "Welcome to use Spectrum Scale on AWS\n",
                      "[GPFS]\n",
                      "ClusterName:",
                      {
                      	"Ref": "ClusterName"
                      },
                      "\n",
                      "FsName:",
                      {
                        "Ref": "FsName"
                      },
                      "\n",
                      "GpfsMountPoint:",
                      {
                      	"Ref": "GpfsMountPoint"
                      },
                      "\n",
                      "ServerNodeCount:",
                      {
                        "Ref": "ServerNodeCount"
                      },
                      "\n",
                      "ComputeNodeCount:",
                      {
                        "Ref": "ComputeNodeCount"
                      },
                      "\n",
                      "DiskPerNode:",
                      {
                        "Ref": "DiskPerNode"
                      },
                      "\n",
                      "DiskSize:",
                      {
                        "Ref": "DiskSize"
                      },
                      "\n",
                      "EBSType:",
                      {
                        "Ref": "EBSType"
                      },
                      "\n",
                      "BlockSize:",
                      {
                        "Ref": "BlockSize"
                      },
                      "\n",
                      "DataReplica:",
                      {
                        "Ref": "DataReplica"
                      },
                      "\n",
                      "MetadataReplica:",
                      {
                        "Ref": "MetadataReplica"
                      },
                      "\n",
                      "ServerWaitHandle:",
                      {
                        "Ref": "AlertWaitHandle"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000655",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "01_pre_setup_gpfs": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "\n",
                      "/usr/lpp/mmfs/bin/mmbuildgpl\n",
                      "echo 'export PATH=$PATH:/usr/lpp/mmfs/bin/' > /etc/profile.d/gpfs.sh\n",
                      "sed -i 's/#   StrictHostKeyChecking ask/StrictHostKeyChecking no/' /etc/ssh/ssh_config\n",
                      "\n"
                    ]
                  ]
                }
              },
              "02_setup_gpfs":{
              	"command": {
              	  "Fn::Join": [
              	  "",
              	  [
              	    "\n",
	                "rm /usr/bin/gpfs-script-server-setup.sh\n",
	                "rm /usr/bin/gpfs-script-server-nsd.sh\n",
	                "rm /usr/bin/gpfs-script-server-cluster.sh\n",
	                "mkdir /var/log/gpfs",
	                "\n",
	                "aws s3 cp s3://",
	                {
	                	"Ref": "s3path"
	                },
	                "/gpfs-script-server-setup.sh  /usr/bin/",
	                "\n",
	                "aws s3 cp s3://",
	                {
	                	"Ref": "s3path"
	                },
	                "/gpfs-script-server-nsd.sh  /usr/bin/",
	                "\n",
	                "aws s3 cp s3://",
	                {
	                	"Ref": "s3path"
	                },
	                "/gpfs-script-server-cluster.sh  /usr/bin/",
	                "\n",
	                "chmod 755 /usr/bin/gpfs-script-server-setup.sh",
	                "\n",
	                "chmod 755 /usr/bin/gpfs-script-server-nsd.sh",
	                "\n",
	                "chmod 755 /usr/bin/gpfs-script-server-cluster.sh",
	                "\n",
	                "/usr/bin/gpfs-script-server-setup.sh >> /var/log/gpfs/gpfs-script-server-setup.log",
	                "\n"
              	  ]
              	 ]
              	}
              },
              "03_create_nsd": {
                "command": "/usr/bin/gpfs-script-server-nsd.sh >> /var/log/gpfs/gpfs-script-server-nsd.log 2>&1"
              },
              "04_create_gpfs": {
                "command": "/usr/bin/gpfs-script-server-cluster.sh > /var/log/gpfs/gpfs-script-server-cluster.log 2>&1"
              },
              "05_mount_gpfs": {
                "command": {
                  "Fn::Join": [
                    
                    "",
                    [
                      "/usr/lpp/mmfs/bin/mmmount ",
                      {
                      	"Ref": "FsName"
                      },
                      " -N /var/log/nodeFile\n",
                      "chmod 777 ",
                      {
                        "Ref": "GpfsMountPoint"
                      },
                      "\n",
                      "\n"
                    ]
                  ]
                }
              },
              "06_add_compute_nodes": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "\n",
                      "/usr/lpp/mmfs/bin/mmaddnode -N /var/log/addNodeFile",
                      "\n",
					  "/usr/lpp/mmfs/bin/mmchlicense client --accept -N /var/log/addNodeFile",
					  "\n",
					  "/usr/lpp/mmfs/bin/mmstartup -N /var/log/addNodeFile",
					  "\n",
					  "sleep 100",
					  "\n",
					  "/usr/lpp/mmfs/bin/mmgetstate -a",
					  "\n",
					  "#/usr/lpp/mmfs/bin/mmmount ",
					  {
                        "Ref": "FsName"
                      },
                      " -N /var/log/addNodeFile",
					  "\n",
					  "chmod 777 ",
                      {
                        "Ref": "GpfsMountPoint"
                      },
                      "\n",
					  "echo Successfully added nodes into cluster.",
                      "\n",
                	  "cfn-signal -e 0 -r 'Configuration failed.' '",
                	  {
                  		"Ref": "AlertWaitHandle"
                	  },
                	  "'\n"
                    ]
                  ]
                }
              }
            }
          } 
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": {
          "Ref": "ServerInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "AdminNodeInstanceIAMRole"
        },
        "InstanceMonitoring": "false",
        "AssociatePublicIpAddress": "true",
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": 40,
              "VolumeType": "gp2"
            }
          }
        ],
        "SecurityGroups": [
          { 
            "Ref": "ServerSecurityGroup"
          },
          { 
            "Ref": "ComputeSecurityGroup"
          },
          {
          	"Ref": "RemoteAccessSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -x\n",
                "yum -y install nfs-utils\n",
                "aws s3 cp s3://",
                {
                  "Ref": "s3path"
                },
                "/Keys/id_rsa ~/.ssh/\n",
                "aws s3 cp s3://",
                {
                   "Ref": "s3path"
                },
                "/Keys/id_rsa.pub ~/.ssh/",
                "\n",
                "chmod 600 ~/.ssh/id_rsa*\n",
                "cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n",
                "\n",
                "cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r ServerNodeLaunchConfig ",
                "   --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "ServerNodes": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          {
            "Ref": "AvailabilityZones"
          }
        ],
        "DesiredCapacity": {
        	"Ref": "ServerNodeCount"
        },
        "LaunchConfigurationName": {
          "Ref": "ServerNodeLaunchConfig"
        },
        "MaxSize": "64",
        "MinSize": "1",
        "VPCZoneIdentifier": [
          {
            "Ref": "SubnetId1"
          },
          {
            "Ref": "SubnetId2"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  " - ServerNode"
                ]
              ]
            }
          }
        ]
      }
    },
    "ComputeNodeLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": [
              "configure_base",
              {
                "ConfigSet": "configure_gpfs"
              }
            ],
            "configure_gpfs": [
              
              "setup_gpfs"
            ]
          },
          "configure_base": {
            "packages": {},
            "files": {},
            "services": {
              "sysvinit": {}
            }
          },
          "setup_gpfs": {
            "packages": {
              "yum": {
                "nfs-utils": []
              }
            },
            "files": {
            "/etc/gpfsaws.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "Welcome to use Spectrum Scale on AWS\n",
                      "[GPFS]\n", 
                      "ComputeNodeCount:",
                      {
                        "Ref": "ComputeNodeCount"
                      },
                      "\n",
                      "ServerNodeCount:",
                      {
                        "Ref": "ServerNodeCount"
                      },
                      "\n",
                      "ClusterName:",
                      {
                      	"Ref": "ClusterName"
                      },
                      "\n",
                      "FsName:",
                      {
                      	"Ref": "FsName"
                      },
                      "\n",
                      "GpfsMountPoint:",
                      {
                      	"Ref": "GpfsMountPoint"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000655",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "01-pre-req-setup": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "\n",
                      "/usr/lpp/mmfs/bin/mmbuildgpl\n",
                      "echo 'export PATH=$PATH:/usr/lpp/mmfs/bin/' > /etc/profile.d/gpfs.sh\n",
                      "#/usr/bin/dynamodb-insert.sh HPCTable > /var/log/dynamicdb-insert.log 2>&1",
                	  "\n",
                      "sed -i 's/#   StrictHostKeyChecking ask/StrictHostKeyChecking no/' /etc/ssh/ssh_config\n",
                      "\n",
                      "mkdir /var/log/gpfs",
                      "\n",
                      "aws s3 cp s3://",
	                  {
	                	"Ref": "s3path"
	                  },
	                  "/gpfs-script-compute-setup.sh  /usr/bin/",
	                  "\n",
	                  "chmod 755 /usr/bin/gpfs-script-compute-setup.sh",
	                  "\n"
                    ]
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
      	"ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": {
          "Ref": "ComputeInstanceType"
        },
        "IamInstanceProfile": {
          "Ref": "AdminNodeInstanceIAMRole"
        },
        "InstanceMonitoring": "false",
        "AssociatePublicIpAddress": "true",
        "KeyName": {
          "Ref": "KeyName"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": 20,
              "VolumeType": "gp2"
            }
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "ComputeSecurityGroup"
          },
          {
          	"Ref": "RemoteAccessSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -x\n",
                "yum -y install nfs-utils\n",
                "aws s3 cp s3://",
                {
                  "Ref": "s3path"
                },
                "/Keys/id_rsa ~/.ssh/\n",
                "aws s3 cp s3://",
                {
                   "Ref": "s3path"
                },
                "/Keys/id_rsa.pub ~/.ssh/",
                "\n",
                "chmod 600 ~/.ssh/id_rsa*\n",
                "cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n",
                "\n",
                "   --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                " -r ComputeNodeLaunchConfig ",
                "   --region ",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          }
        }
      }
    },
    "ComputeNodes": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          {
            "Ref": "AvailabilityZones"
          }
        ],
        "DesiredCapacity": {
          "Ref": "ComputeNodeCount"
        },
        "LaunchConfigurationName": {
          "Ref": "ComputeNodeLaunchConfig"
        },
        "MaxSize": "64",
        "MinSize": "0",
        "VPCZoneIdentifier": [
          {
            "Ref": "SubnetId"
          },
          {
            "Ref": "SubnetId2"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  " - ComputeNode"
                ]
              ]
            }
          }
        ]
      }
    },
    "AlertWaitCondition": {
      "DependsOn": [
        
        "ServerNodes"
      ],
      "Properties": {
        "Count": 1,
        "Handle": {
          "Ref": "AlertWaitHandle"
        },
        "Timeout": "2400"
      },
      "Type": "AWS::CloudFormation::WaitCondition"
    },
    "AlertWaitHandle": {
      "Properties": {},
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    }
  },
  "Outputs": {
    "StackName": {
      "Value": {
        "Ref": "AWS::StackName"
      }
    },
    "AdminNodeInstanceIAMRoleid": {
      "Value": {
        "Ref": "AdminNodeInstanceIAMRole"
      }
    }
  }
  
}